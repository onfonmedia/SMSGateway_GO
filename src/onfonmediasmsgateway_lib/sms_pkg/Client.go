/*
 * onfonmediasmsgateway_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package sms_pkg


import(
	"time"
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"onfonmediasmsgateway_lib/apihelper_pkg"
	"onfonmediasmsgateway_lib/configuration_pkg"
)
/*
 * Client structure as interface implementation
 */
type SMS_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * Get Sent Message List
 * @param    *time.Time        enddate      parameter: Required
 * @param    *time.Time        fromdate     parameter: Required
 * @param    int64             length       parameter: Required
 * @param    int64             start        parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *SMS_IMPL) GetSentMessageList (
            enddate *time.Time,
            fromdate *time.Time,
            length int64,
            start int64) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/SMS"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "enddate" : enddate,
        "fromdate" : fromdate,
        "length" : length,
        "start" : start,
        "ApiKey" : onfonmediasmsgateway_lib.config.ApiKey,
        "ClientId" : onfonmediasmsgateway_lib.config.ClientId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Get Sent Message Status
 * @param    int64        messageId     parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *SMS_IMPL) GetSentMessageStatus (
            messageId int64) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/MessageStatus"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "MessageId" : messageId,
        "ApiKey" : onfonmediasmsgateway_lib.config.ApiKey,
        "ClientId" : onfonmediasmsgateway_lib.config.ClientId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Create SMS
 * @param    string         message          parameter: Required
 * @param    string         mobileNumber     parameter: Required
 * @param    string         senderId         parameter: Required
 * @param    *string        coRelator        parameter: Optional
 * @param    *bool          isFlash          parameter: Optional
 * @param    *bool          isUnicode        parameter: Optional
 * @param    *string        linkId           parameter: Optional
 * @param    *string        groupId          parameter: Optional
 * @param    *string        scheduleTime     parameter: Optional
 * @param    *string        serviceId        parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *SMS_IMPL) GetCreateSMS (
            message string,
            mobileNumber string,
            senderId string,
            coRelator *string,
            isFlash *bool,
            isUnicode *bool,
            linkId *string,
            groupId *string,
            scheduleTime *string,
            serviceId *string) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/SendSMS"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "Message" : message,
        "MobileNumber" : mobileNumber,
        "SenderId" : senderId,
        "CoRelator" : coRelator,
        "Is_Flash" : isFlash,
        "Is_Unicode" : isUnicode,
        "LinkId" : linkId,
        "groupId" : groupId,
        "scheduleTime" : scheduleTime,
        "serviceId" : serviceId,
        "ApiKey" : onfonmediasmsgateway_lib.config.ApiKey,
        "ClientId" : onfonmediasmsgateway_lib.config.ClientId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Create SMS
 * @param    string         message          parameter: Required
 * @param    string         mobileNumber     parameter: Required
 * @param    string         senderId         parameter: Required
 * @param    *string        coRelator        parameter: Optional
 * @param    *bool          isFlash          parameter: Optional
 * @param    *bool          isUnicode        parameter: Optional
 * @param    *string        linkId           parameter: Optional
 * @param    *string        groupId          parameter: Optional
 * @param    *string        scheduleTime     parameter: Optional
 * @param    *string        serviceId        parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *SMS_IMPL) CreateSMS (
            message string,
            mobileNumber string,
            senderId string,
            coRelator *string,
            isFlash *bool,
            isUnicode *bool,
            linkId *string,
            groupId *string,
            scheduleTime *string,
            serviceId *string) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/SendSMS"

    //variable to hold errors
    var err error = nil
    //process optional template parameters
    _pathUrl, err = apihelper_pkg.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{} {
        "Message" : message,
        "MobileNumber" : mobileNumber,
        "SenderId" : senderId,
        "CoRelator" : coRelator,
        "Is_Flash" : isFlash,
        "Is_Unicode" : isUnicode,
        "LinkId" : linkId,
        "groupId" : groupId,
        "scheduleTime" : scheduleTime,
        "serviceId" : serviceId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "ApiKey" : onfonmediasmsgateway_lib.config.ApiKey,
        "ClientId" : onfonmediasmsgateway_lib.config.ClientId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, nil)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Create Bulk SMS
 * @param    string            mobileNumberMessage      parameter: Required
 * @param    string            senderId                 parameter: Required
 * @param    *string           coRelator                parameter: Optional
 * @param    *bool             isFlash                  parameter: Optional
 * @param    *bool             isUnicode                parameter: Optional
 * @param    *string           linkId                   parameter: Optional
 * @param    *time.Time        scheduleTime             parameter: Optional
 * @param    *string           serviceId                parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *SMS_IMPL) GetCreateBulkSMS (
            mobileNumberMessage string,
            senderId string,
            coRelator *string,
            isFlash *bool,
            isUnicode *bool,
            linkId *string,
            scheduleTime *time.Time,
            serviceId *string) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/SendBulkSMS"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "MobileNumber_Message" : mobileNumberMessage,
        "SenderId" : senderId,
        "CoRelator" : coRelator,
        "Is_Flash" : isFlash,
        "Is_Unicode" : isUnicode,
        "LinkId" : linkId,
        "scheduleTime" : scheduleTime,
        "serviceId" : serviceId,
        "ApiKey" : onfonmediasmsgateway_lib.config.ApiKey,
        "ClientId" : onfonmediasmsgateway_lib.config.ClientId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Create Bulk SMS
 * @param    []string          messageParameters     parameter: Required
 * @param    string            senderId              parameter: Required
 * @param    *bool             isFlash               parameter: Optional
 * @param    *bool             isUnicode             parameter: Optional
 * @param    *time.Time        scheduleDateTime      parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *SMS_IMPL) CreateBulkSMS (
            messageParameters []string,
            senderId string,
            isFlash *bool,
            isUnicode *bool,
            scheduleDateTime *time.Time) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/SendBulkSMS"

    //variable to hold errors
    var err error = nil
    //process optional template parameters
    _pathUrl, err = apihelper_pkg.AppendUrlWithTemplateParameters(_pathUrl, map[string]interface{} {
        "MessageParameters" : messageParameters,
        "ScheduleDateTime" : scheduleDateTime,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "SenderId" : senderId,
        "Is_Flash" : isFlash,
        "Is_Unicode" : isUnicode,
        "ApiKey" : onfonmediasmsgateway_lib.config.ApiKey,
        "ClientId" : onfonmediasmsgateway_lib.config.ClientId,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, nil)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

